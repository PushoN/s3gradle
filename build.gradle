import com.amazonaws.auth.AWSStaticCredentialsProvider
import com.amazonaws.auth.BasicSessionCredentials
import com.amazonaws.services.s3.AmazonS3Client
import com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClientBuilder
import com.amazonaws.services.securitytoken.model.AssumeRoleRequest
import com.amazonaws.services.securitytoken.model.Credentials
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.model.*;
import com.amazonaws.regions.Regions;
import com.amazonaws.services.s3.AmazonS3ClientBuilder;

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'com.amazonaws', name: 'aws-java-sdk-sts', version: '1.11.895'
        classpath group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.11.895'
    }
}

def bucketName = '';
def gameName = '';
def uploadVersion = '0';
def distDir = '';

task uploadUpdate() {
    doLast {

        bucketName = findProperty('bucket') as String;
        gameName = findProperty('game') as String;
        distDir = findProperty('localPath') as String;

        AmazonS3 s3Client = AmazonS3ClientBuilder.standard()
                .withRegion(Regions.AP_SOUTHEAST_1)
                .build();

        ListObjectsRequest lor = new ListObjectsRequest()
                .withBucketName(bucketName)
                .withPrefix('games/' + gameName + '/').withDelimiter('/');

        ObjectListing listV2 = s3Client.listObjects(lor);

        ArrayList versions = new ArrayList();
        versions.add(0);

        listV2.commonPrefixes.each {
            prfx ->
                String version = prfx.split('/')[2].replace('v', '');
                //println version;
                versions.add(version);
        };

        println versions.sort()
        int lastIndex = versions.size()-1;
        int lastVersion = versions.get(lastIndex) as int;

        int newVersion = ++lastVersion;

        // this value we an parse in Jenkins
        println newVersion;

        uploadVersion = newVersion;

        println "\nDone!"
    }
}

task runPutNewVersion { dependsOn uploadUpdate
    doLast {

        //String cmd = "aws s3 sync ${distDir} s3://${bucketName}/games/${gameName}/v${uploadVersion} --acl public-read --quiet"
        //String cmd = "ls -al";
        String cmd = "echo \$PATH";
        Runtime run = Runtime.getRuntime();
        Process pr = run.exec(cmd);
        pr.waitFor();
        BufferedReader buf = new BufferedReader(new InputStreamReader(pr.getInputStream()));
        String line = "";
        while ((line = buf.readLine()) != null) {
            System.out.println(line);
        }
    }
}